{"ts":1346829339890,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class BinaryTree(object):\n    class Node(object):\n        parent = None\n        data = None\n        left = None\n        right = None\n        def __init__(self, parent, data):\n            self.parent = parent\n            self.data = data\n            \n    def insert(self, data):\n        pass\n    \n    def find(self, data):\n        pass\n    \n    def remove(self, data):\n        pass\n    \n"]],"start1":0,"start2":0,"length1":0,"length2":386}]],"length":386}
{"contributors":[],"silentsave":false,"ts":1346850971808,"patch":[[{"diffs":[[0,"t):\n    "],[-1,""],[0,""],[1,"\n    root = None\n    \n    "],[0,"class No"]],"start1":22,"start2":22,"length1":16,"length2":42},{"diffs":[[0,"    "],[-1,"    \n    def insert(self, data):\n        pass\n    \n    def find(self, data)"],[1,"def __str__(self):\n            return \"\\n%s %s %s\" % (\n                self.left or None, \n                self.data, \n                self.right or None,)\n            \n    def insert(self, data):\n        if not self.root:\n            self.root = self.Node(None, data)\n        else:\n            self._insert_below(self.root, data)\n            \n    def _insert_below(self, node, data):\n        if data < node.data:\n            if node.left:\n                self._insert_below(node.left, data)\n            else:\n                node.left = self.Node(node, data)\n        else"],[0,":\n  "]],"start1":267,"start2":267,"length1":83,"length2":580},{"diffs":[[0,"    "],[1," "],[-1,"pass\n    \n    def remove(self, data):\n        pass\n    \n"],[1,"   if node.right:\n                self._insert_below(node.right, data)\n            else:\n                node.right = self.Node(node, data)\n\n    def find(self, data):\n        if not self.root:\n            return None\n        else:\n            return self._find_below(self.root, data)\n            \n    def _find_below(self, node, data):\n        if data == node.data:\n            return node\n        elif data < node.data:\n            return self._find_below(node.left, data)\n        else:\n            return self._find_below(node.right, data)\n            \n    \n    def remove(self, data):\n        pass\n    \n    def __str__(self):\n        return \"BinaryTree: %s\"%(self.root,) \n    \ntree = BinaryTree()\nimport random\nnumbers = [x for x in range(1,9999)]\nrandom.shuffle(numbers)\nfor x in numbers:\n    tree.insert(x)\nprint tree.find(777)"]],"start1":849,"start2":849,"length1":60,"length2":837}]],"length":1686,"saved":false}
