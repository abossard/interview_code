{"ts":1346701114811,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class LinkedList(object):\n    \n    class Node(object):\n        \n        list = None\n        data = None\n        next = None\n        \n        def __init__(self, list, data, next):\n            self.list = list\n            self.data = data\n            self.next = next\n            \n        def __unicode__(self):\n            if self.next:\n                return \"%s -> %s\"%(self.data, self.next.__unicode__())\n            else:\n                return self.data\n    \n    head = None\n    tail = None\n    \n    def __init__(self):\n        pass\n        \n    def purge(self):\n        self.head = None\n        self.tail = None\n        \n        \n    @property\n    def is_empty(self):\n        return self.head == None\n        \n    @property\n    def first(self):\n        if self.head:\n            return self.head\n        else:\n            raise ContainerEmpty\n\n    @property\n    def last(self):\n        if self.last:\n            return self.last\n        else:\n            raise ContainerEmpty\n                        \n    def prepend(self, data):\n        new_node = LinkedList.Node(self, data, self.head)\n        if not self.head:\n            self.tail = new_node\n        self.head = new_node\n\n    def append(self, data):\n        new_node = LinkedList.Node(self, data, None)\n        if not self.head:\n            self.head = new_node\n        else:\n            self.tail.next = new_node\n        self.tail = new_node\n    \n    def __unicode__(self):\n        return self.head.__unicode__()\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1475}]],"length":1475}
